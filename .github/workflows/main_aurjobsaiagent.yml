# # Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# # More GitHub Actions for Azure: https://github.com/Azure/actions
# # More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

# name: Build and deploy Python app to Azure Web App - AiAgent

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# env:
#   PYTHON_VERSION: "3.10"
#   AZURE_WEBAPP_NAME: "AiAgent"

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python version
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}
#           cache: "pip" # Cache pip dependencies

#       - name: Create and start virtual environment
#         run: |
#           python -m venv venv
#           source venv/bin/activate
#           echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
#           echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

#       # Clean up unnecessary files BEFORE installing dependencies
#       - name: Clean up unnecessary files
#         run: |
#           echo "Cleaning up files before packaging..."
#           # Remove Python cache files
#           find . -type d -name "_pycache_" -exec rm -rf {} + 2>/dev/null || true
#           find . -name "*.pyc" -delete 2>/dev/null || true
#           find . -name "*.pyo" -delete 2>/dev/null || true

#           # Remove test and development files
#           rm -rf tests/ .pytest_cache/ .coverage htmlcov/ .tox/ .mypy_cache/ 2>/dev/null || true

#           # Remove development configuration files
#           rm -rf .vscode/ .idea/ 2>/dev/null || true
#           rm -f .env.local .env.development .env.test 2>/dev/null || true

#           # Remove documentation and non-essential files
#           rm -rf docs/ README.md CHANGELOG.md .gitignore 2>/dev/null || true

#           # Remove any log files
#           find . -name "*.log" -delete 2>/dev/null || true

#           echo "Cleanup completed!"

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt --no-cache-dir

#       # Optional: Add step to run tests here (PyTest, Django test suites, etc.)
#       # - name: Run tests
#       #   run: |
#       #     pip install pytest
#       #     pytest

#       # Create deployment package with selective inclusion
#       - name: Create deployment package
#         run: |
#           echo "Creating deployment package..."

#           # Create a clean directory for deployment
#           mkdir -p deployment_package

#           # Copy only necessary files
#           cp -r *.py deployment_package/ 2>/dev/null || true
#           cp -r static/ deployment_package/ 2>/dev/null || true
#           cp -r templates/ deployment_package/ 2>/dev/null || true
#           cp -r app/ deployment_package/ 2>/dev/null || true
#           cp requirements.txt deployment_package/ 2>/dev/null || true
#           cp startup.sh deployment_package/ 2>/dev/null || true
#           cp gunicorn.conf.py deployment_package/ 2>/dev/null || true

#           # Copy virtual environment site-packages (if needed)
#           # Alternatively, let Azure rebuild from requirements.txt

#           # Create zip from deployment_package
#           cd deployment_package
#           zip -r ../release.zip . -x ".git" "_pycache_" ".pyc" ".pyo"
#           cd ..

#           # Check package size
#           ls -lah release.zip
#           echo "Package size: $(du -h release.zip | cut -f1)"

#       - name: Upload artifact for deployment jobs
#         uses: actions/upload-artifact@v4
#         with:
#           name: python-app
#           path: release.zip
#           retention-days: 1 # Clean up artifacts quickly

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     environment:
#       name: "Production"
#       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

#     permissions:
#       id-token: write
#       contents: read

#     steps:
#       - name: Download artifact from build job
#         uses: actions/download-artifact@v4
#         with:
#           name: python-app

#       - name: Verify and extract deployment package
#         run: |
#           echo "Downloaded package size: $(du -h release.zip | cut -f1)"
#           unzip -q release.zip
#           echo "Extracted contents:"
#           ls -la

#       - name: Login to Azure
#         uses: azure/login@v2
#         with:
#           client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_6B6806687CD942A5B377C37D2B2E56EA }}
#           tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_3E3F7A234D7547F6A186444FA094E29F }}
#           subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_E6339FB5C52D44B3B819427C205CC508 }}

#       - name: Configure Azure App Service settings
#         run: |
#           # Set deployment configurations to prevent space issues
#           az webapp config appsettings set \
#             --name ${{ env.AZURE_WEBAPP_NAME }} \
#             --resource-group $(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --query resourceGroup -o tsv) \
#             --settings \
#               SCM_DO_BUILD_DURING_DEPLOYMENT=true \
#               ENABLE_ORYX_BUILD=true \
#               POST_BUILD_SCRIPT_PATH="cleanup.sh" \
#               PYTHON_ENABLE_GUNICORN_MULTIWORKERS=true

#       - name: Deploy to Azure Web App
#         uses: azure/webapps-deploy@v3
#         id: deploy-to-webapp
#         with:
#           app-name: ${{ env.AZURE_WEBAPP_NAME }}
#           slot-name: "Production"
#           package: "."
#           startup-command: "gunicorn --bind=0.0.0.0 --timeout 600 app:app"

#       - name: Verify deployment
#         run: |
#           echo "Deployment completed!"
#           echo "App URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"

#           # Optional: Health check
#           sleep 30
#           curl -f ${{ steps.deploy-to-webapp.outputs.webapp-url }} || echo "Health check failed, but deployment may still be starting"

# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - AiAgent

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_6B6806687CD942A5B377C37D2B2E56EA }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_3E3F7A234D7547F6A186444FA094E29F }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_E6339FB5C52D44B3B819427C205CC508 }}

      - name: "Deploy to Azure Web App"
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: "AiAgent"
          slot-name: "Production"
